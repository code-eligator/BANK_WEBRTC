/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.36
 * Generated at: 2020-08-28 17:23:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.teller.bankCounter;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class bankCounter_002dteller_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/jsp/include/header_teller.jsp", Long.valueOf(1598598631305L));
    _jspx_dependants.put("jar:file:/D:/hanaProject-workspace/eclipse-workspace/wtpwebapps/spring-project/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/jsp/include/footer.jsp", Long.valueOf(1598438778952L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1598360198913L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>화상창구상담 서비스 - 텔러</title>\r\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/favicon/favicon.ico\">\r\n");
      out.write("<style>\r\n");
      out.write("\t#chatDiv{\r\n");
      out.write("\t\tfloat:right;\r\n");
      out.write("\t\tdisplay : inline;\r\n");
      out.write("\t\twidth : 25%;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#clientVideoDiv {\r\n");
      out.write("\t\tfloat : left;\r\n");
      out.write("\t\tdisplay : inline;\r\n");
      out.write("\t\twidth : 50%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#tellerVideoDiv {\r\n");
      out.write("\t\ttext-align : center;\r\n");
      out.write("\t\tfloat : right;\r\n");
      out.write("\t\tdisplay : inline;\r\n");
      out.write("\t\twidth : 25%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#shareVideoDiv {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfloat : left;\r\n");
      out.write("\t\tdisply : inline;\r\n");
      out.write("\t\twidth: 25%;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#client-info {\r\n");
      out.write("\t\tfloat : left;\r\n");
      out.write("\t\tdisply : inline;\r\n");
      out.write("\t\twidth: 25%;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#localVideo {\r\n");
      out.write("\t\tdisplay :inline; \r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t\tborder-radius: 10px 10px 10px 10px;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#remoteVideo {\r\n");
      out.write("\t\twidth:100%;\r\n");
      out.write("\t\tdisplay : inline;\r\n");
      out.write("\t\tborder-radius: 10px 10px 10px 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#screenShareVideo {\r\n");
      out.write("\t\twidth:100%;\r\n");
      out.write("\t\tdisplay : inline;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#chat{\r\n");
      out.write("\t\tpadding-left : 5px;\r\n");
      out.write("\t\tpadding-right : 5px;\r\n");
      out.write("\t\toverflow-y : scroll;\r\n");
      out.write("\t\twidth : 100%;\r\n");
      out.write("\t\theight: 88%;\r\n");
      out.write("\t\tbackground-color: #ebecf0;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#message {\r\n");
      out.write("\t\twidth: 80%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#sendChat {\r\n");
      out.write("\t\twidth : 18%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#workDiv {\r\n");
      out.write("\t\twidth:100%;\r\n");
      out.write("\t\tdisplay : inline;\r\n");
      out.write("\t\tfloat:left;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#workDiv #workName {\r\n");
      out.write("\t\tfont-size:x-large;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"\r\n");
      out.write("\tintegrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\"\r\n");
      out.write("\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js\"></script>\r\n");
      out.write("\t<script src=\"https://www.webrtc-experiment.com/common.js\"></script>\r\n");
      out.write("<!-- <script src=\"/spring-project/js/teller/bankCounter/bankCounter-teller.js\"></script>  -->\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Bootstrap core CSS -->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/vendor/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<!-- Custom styles for this template -->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/simple-sidebar.css\" rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("\thtml, body {\r\n");
      out.write("\t\theight: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.bg-light {\r\n");
      out.write("\t\tbackground-color: #FFFFFF!important;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tnav.navbar.navbar-expand-lg.navbar-light.bg-light div.container {\r\n");
      out.write("\t\tpadding-left : 100;\r\n");
      out.write("\t\tmargin-left : 100;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tnav.navbar.navbar-expand-lg.navbar-light.bg-light {\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t\tborder-bottom-color: black;\r\n");
      out.write("\t\tborder-bottom-width: thin;\r\n");
      out.write("\t\tborder-bottom-style: solid;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tbody{\r\n");
      out.write("\t\tfont-family: \"Hana B\";\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- Bootstrap core JavaScript -->\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/vendor/jquery/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/vendor/bootstrap/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n");
      out.write("\t<div class=\"container\" style=\"padding-left : 70px\">\r\n");
      out.write("\t\t<a class=\"navbar-brand\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/teller\"><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/hanalogo.png\" style=\"width:150px; height:40px;\"></a>\r\n");
      out.write("\t\t<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("\t\t\t<span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("\t\t</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n");
      out.write("\t\t<ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("\t\t\t");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("</nav>");
      out.write("\r\n");
      out.write("\t</header>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"d-flex\" id=\"wrapper\">\r\n");
      out.write("\t\t<!-- Sidebar -->\r\n");
      out.write("    \t<div class=\"bg-light border-right\" id=\"sidebar-wrapper\">\r\n");
      out.write("    \t\t<div class=\"sidebar-heading\">\r\n");
      out.write("    \t\t\t업무 목록\r\n");
      out.write("    \t\t\t<input type=\"text\" id=\"workCode\" >\r\n");
      out.write("    \t\t</div>\r\n");
      out.write("    \t\t<div class=\"list-group list-group-flush\">\r\n");
      out.write("\t    \t\t<!-- <a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">Dashboard</a>  -->\r\n");
      out.write("\t    \t\t<a id=\"work_selectAccount1001\" class=\"list-group-item list-group-item-action bg-light\">계좌 조회(1100)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">계좌 개설 (1101)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">예금 가입(1102)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">적금 가입(1103)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">계좌 이체(1104)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">계좌 제신고(1105)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">카드 조회(1106)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">체크 카드 가입(1107)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">신용 카드 가입(1108)</a>\r\n");
      out.write("    \t\t\t<a href=\"#\" class=\"list-group-item list-group-item-action bg-light\">카드 제신고(1109)</a>\r\n");
      out.write("    \t\t</div>\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \t<!-- /#sidebar-wrapper -->\r\n");
      out.write("\r\n");
      out.write("    \t<!-- Page Content -->\r\n");
      out.write("    \t<div id=\"page-content-wrapper\">\r\n");
      out.write("    \t\t<div class=\"container-fluid\">\r\n");
      out.write("    \t\t\t<div id=\"clientVideoDiv\">\r\n");
      out.write("    \t\t\t\t<video id=\"remoteVideo\" autoplay playsinline>\r\n");
      out.write("    \t\t\t\t\t<source style=\"width: 100%\">\r\n");
      out.write("    \t\t\t\t</video>\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t<div id=\"chatDiv\">\r\n");
      out.write("    \t\t\t\t<div id=\"chat\">\r\n");
      out.write("    \t\t\t\t\t<strong>텔러 : 반갑습니다 손님! 영상, 음성이 불안정한 경우 채팅을 이용해주세요.</strong>\r\n");
      out.write("    \t\t\t\t\t<br>\r\n");
      out.write("    \t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" id=\"message\">\r\n");
      out.write("    \t\t\t\t<button class=\"btn btn-primary\" id=\"sendChat\">전 송</button>\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t<div id=\"tellerVideoDiv\">\r\n");
      out.write("    \t\t\t\t<video id=\"localVideo\" autoplay muted playsinline>\r\n");
      out.write("    \t\t\t\t\t<source style=\"width: 100%\">\r\n");
      out.write("    \t\t\t\t</video>\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t<div id=\"client-info\">\r\n");
      out.write("    \t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${clientVO.name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" 손님\r\n");
      out.write("    \t\t\t\t<button id=\"screenShareBtn\">화면 공유</button>\t\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t<div id=\"shareVideoDiv\">\r\n");
      out.write("    \t\t\t\t<video id=\"screenShareVideo\" poster=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/tellerSharePoster.png\" autoplay playsinline muted>\r\n");
      out.write("    \t\t\t\t\t<source style=\"width: 100%\">\r\n");
      out.write("    \t\t\t\t</video>\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t<div id=\"workDiv\">\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("    \t\t</div>\r\n");
      out.write("    \t</div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- /#page-content-wrapper -->\r\n");
      out.write("\r\n");
      out.write("\t<footer>\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\t#sticky-footer {\r\n");
      out.write("\t\twidth : 100%;\r\n");
      out.write("\t\theight: 60px;\r\n");
      out.write("\t\tposition : fixed;\r\n");
      out.write("\t\tbottom : 0;\r\n");
      out.write("\t\tpadding : 30px;\r\n");
      out.write("\t\tz-index : 10;\r\n");
      out.write("\t\tflex-shrink: none;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<footer id=\"sticky-footer\" class=\"py-4 bg-dark text-white-50\">\r\n");
      out.write("    <div class=\"container text-center\">\r\n");
      out.write("      <small>Copyright &copy; Hana TI</small>\r\n");
      out.write("    </div>\r\n");
      out.write("</footer>");
      out.write("\r\n");
      out.write("\t</footer>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("/**\r\n");
      out.write(" * \r\n");
      out.write(" */\r\n");
      out.write(" \t\r\n");
      out.write(" \r\n");
      out.write("//for server\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#menu-toggle\").click(function(e) {\r\n");
      out.write("\t  \t\te.preventDefault();\r\n");
      out.write("\t  \t\t$(\"#wrapper\").toggleClass(\"toggled\");\r\n");
      out.write("\t  \t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//var url = 'https://192.168.217.52:1337';\r\n");
      out.write("\t\tvar url = 'https://localhost:1337';\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar socket;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar room = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${clientVO.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\r\n");
      out.write("\t\t// 내가 만든 사람임을 나타내는 비트. 오퍼와 앤서를 구분하기 위해서 필요한 것 같음.\r\n");
      out.write("\t\tvar isInitiator = false;\r\n");
      out.write("\t\t// 두명의 클라이언트가 모두 채널에 접속완료하여 채널이 서비스 준비가 되었을 때.\r\n");
      out.write("\t\tvar isChannelReady = false;\r\n");
      out.write("\t\tvar isStarted = false;\r\n");
      out.write("\t\tvar isSharing = false;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar pcConfig = {\r\n");
      out.write("\t\t\t\t'iceServers' : [\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t'urls' : 'stun:stun.l.google.com:19302'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t'urls' : 'stun:stun1.l.google.com:19302'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t    'urls' : 'turn:turn.anyfirewall.com:443?transport=tcp',\r\n");
      out.write("\t\t\t\t\t    'credential' : 'webrtc',\r\n");
      out.write("\t\t\t\t\t    'username' : 'webrtc'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t]\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//if(location.hostname !== 'localhost') {\r\n");
      out.write("\t\t\trequestTurn();\r\n");
      out.write("\t\t//}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// for stream\r\n");
      out.write("\t\tlet localStream;\r\n");
      out.write("\t\tlet remoteStream;\r\n");
      out.write("\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tlet shareStream;\r\n");
      out.write("\t\t//////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction requestTurn(/*turnURL*/) {\r\n");
      out.write("\t\t\tvar turnExists = false;\r\n");
      out.write("\t\t\tfor(var i in pcConfig.iceServers) {\r\n");
      out.write("\t\t\t\tif(pcConfig.iceServers[i].urls.substr(0, 5) === 'turn:'){\r\n");
      out.write("\t\t\t\t\tturnExists = true;\r\n");
      out.write("\t\t\t\t\tturnReady = true;\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar pc = new RTCPeerConnection(pcConfig);\r\n");
      out.write("\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tvar sharePc = new RTCPeerConnection(pcConfig);\r\n");
      out.write("\t\t/////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet localVideo = document.getElementById('localVideo');\r\n");
      out.write("\t\tlet remoteVideo = document.querySelector('#remoteVideo');\r\n");
      out.write("\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tlet screenShareVideo = document.getElementById('screenShareVideo');\r\n");
      out.write("\t\t/////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tgetLocalMediaStream();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconsole.log(localVideo);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//const mediaStreamConstraints = {\r\n");
      out.write("\t\t//\tvideo : true\r\n");
      out.write("\t\t//}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction getLocalMediaStream() {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 되는 코드.\r\n");
      out.write("\t\t\tnavigator.mediaDevices.getUserMedia({video : true, audio : true})\r\n");
      out.write("\t\t\t.then(gotStream)\r\n");
      out.write("\t\t\t.then(connectToServer)\r\n");
      out.write("\t\t\t//.catch((err) => console.log(err.name, err.message));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction gotStream(stream) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlocalVideo.srcObject = stream;\r\n");
      out.write("\t\t\tconsole.log('Adding local stream.');\r\n");
      out.write("\t\t\tlocalStream = stream;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction println(data) {\r\n");
      out.write("\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t$('#result').append('<p>' + data + '</p>')\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 서버에 연결하는 함수 정의\r\n");
      out.write("\t\tfunction connectToServer() {\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar options = {\r\n");
      out.write("\t\t\t\t'forceNew' : true\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t//var url = \"http://\" + host + \":\" + port;\r\n");
      out.write("\t\t\t//var url = \"https://\" + host + \":\" + port;\r\n");
      out.write("\t\t\tprintln(url);\r\n");
      out.write("\t\t\tsocket = io.connect(url, options);\r\n");
      out.write("\r\n");
      out.write("\t\t\tsocket.on('connect', function() {\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tprintln(\"웹 소켓 서버에 연결되었습니다. : \" + url);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t///////////////////// socket server로부터의 이벤트 정의 //////////////////\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t// 내가 방을 만든 상황일 때에 날아오는 이벤트\r\n");
      out.write("\t\t\t\tsocket.on('created', function(room) {\r\n");
      out.write("\t\t\t\t\tconsole.log('Created room ' + room);\r\n");
      out.write("\t\t\t\t\tisInitiator = true;\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 방이 꽉차서 들어가지 못했을 때 날아오는 이벤트\r\n");
      out.write("\t\t\t\tsocket.on('full', function(room) {\r\n");
      out.write("\t\t\t\t\tconsole.log('Room' + room + 'is full');\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 1명이 있던 방에 누군가가 join되었음을 알리는 이벤트. 양 측 모두게 날아옴. // ChannelReady상태 set\r\n");
      out.write("\t\t\t\tsocket.on('join', function(room) {\r\n");
      out.write("\t\t\t\t\tconsole.log('Another peer made a request to join room ' + room);\r\n");
      out.write("\t\t\t\t\tconsole.log('This peer is the initiator of room ' + room + '!');\r\n");
      out.write("\t\t\t\t\tisChannelReady = true;\r\n");
      out.write("\t\t\t\t\tconsole.log('방 생성 완료!');\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("//\t\t\t\t\tsendMessage('got user media');\r\n");
      out.write("//\t\t\t\t\tif(isInitiator) {\r\n");
      out.write("//\t\t\t\t\t\tmaybeStart();\r\n");
      out.write("//\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tsocket.on('roomReady', function(room) {\r\n");
      out.write("\t\t\t\t\tsendMessage('got user media');\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(isInitiator) {\r\n");
      out.write("\t\t\t\t\t\tmaybeStart();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tsocket.on('chat', function(msg){\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tlet str = '';\r\n");
      out.write("\t\t\t\t\tstr += '<strong> 손님 : ' + msg + '</strong>';\r\n");
      out.write("\t\t\t\t\tstr += '<br>'\r\n");
      out.write("\t\t\t\t\t$('#chat').append(str);\r\n");
      out.write("\t\t\t\t}) \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 들어가려는 방이 이미 만들어져 있고 내가 그 방에 들어갔을 때에 나에게만 날아오는 이벤트. // ChannelReady상태 set\r\n");
      out.write("\t\t\t\tsocket.on('joined', function(room) {\r\n");
      out.write("\t\t\t\t\tconsole.log('joined: ' + room);\r\n");
      out.write("\t\t\t\t\tisChannelReady = true;\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 'message' event 날아왔을 때 행동 정의\r\n");
      out.write("\t\t\t\tsocket.on('message', function(message) {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(message ==='got user media') {\r\n");
      out.write("\t\t\t\t\t\tmaybeStart();\r\n");
      out.write("\t\t\t\t\t} else if(message.type ==='offer') {\r\n");
      out.write("\t\t\t\t\t\t// 상대방의 offer\r\n");
      out.write("\t\t\t\t\t\tif(!isInitiator && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t\t// 내가 방 연사람 아니고 서비스 아직 시작 안됬으면.\r\n");
      out.write("\t\t\t\t\t\t\t// 먼저 오퍼가 왔으니 이런일은 없지 않을까?\r\n");
      out.write("\t\t\t\t\t\t\tmaybeStart();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t// 상대의 sdp를 저장 후 answer\r\n");
      out.write("\t\t\t\t\t\tprintln('3. B : setRemoteDescription.')\r\n");
      out.write("\t\t\t\t\t\tpc.setRemoteDescription(new RTCSessionDescription(message));\r\n");
      out.write("\t\t\t\t\t\tdoAnswer();\r\n");
      out.write("\t\t\t\t\t} else if (message.type ==='answer' && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t// 상대방의 answer\r\n");
      out.write("\t\t\t\t\t\t// 상대방의 sdp를 저장\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tprintln('6. A: local setRemoteDescription')\r\n");
      out.write("\t\t\t\t\t\tpc.setRemoteDescription(new RTCSessionDescription(message));\r\n");
      out.write("\t\t\t\t\t} else if(message.type === 'candidate' && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t// offer, anwer 성립 후 상대방의 candidate message\r\n");
      out.write("\t\t\t\t\t\t// 언제 일어나는지 확인.\r\n");
      out.write("\t\t\t\t\t\tvar candidate = new RTCIceCandidate({\r\n");
      out.write("\t\t\t\t\t\t\tsdpMLineIndex : message.label,\r\n");
      out.write("\t\t\t\t\t\t\tcandidate : message.candidate\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\tpc.addIceCandidate(candidate);\r\n");
      out.write("\t\t\t\t\t} else if(message === 'bye' && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t// 상대방 떠남.\r\n");
      out.write("\t\t\t\t\t\tconsole.log('Session terminated.');\r\n");
      out.write("\t\t\t\t\t\tisStarted = false;\r\n");
      out.write("\t\t\t\t\t\tpc.close();\r\n");
      out.write("\t\t\t\t\t\tpc = null;\r\n");
      out.write("\t\t\t\t\t\tisInitiator = false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// shareVideo\r\n");
      out.write("\t\t\t\t// 'message' event 날아왔을 때 행동 정의\r\n");
      out.write("\t\t\t\tsocket.on('shareVideoMsg', function(message) {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tprintln('shareVideoMsg 받음. message : ' + message);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(message ==='startShare') {\r\n");
      out.write("\t\t\t\t\t\tshareStart();\r\n");
      out.write("\t\t\t\t\t} else if(message.type ==='offer') {\r\n");
      out.write("\t\t\t\t\t\t// 상대방의 offer\r\n");
      out.write("\t\t\t\t\t\tif(!isInitiator && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t\t// 내가 방 연사람 아니고 서비스 아직 시작 안됬으면.\r\n");
      out.write("\t\t\t\t\t\t\t// 먼저 오퍼가 왔으니 이런일은 없지 않을까?\r\n");
      out.write("\t\t\t\t\t\t\tshareStart();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t// 상대의 sdp를 저장 후 answer\r\n");
      out.write("\t\t\t\t\t\tprintln('3. B : (share)setRemoteDescription.')\r\n");
      out.write("\t\t\t\t\t\tsharePc.setRemoteDescription(new RTCSessionDescription(message));\r\n");
      out.write("\t\t\t\t\t\tdoShareAnswer();\r\n");
      out.write("\t\t\t\t\t} else if (message.type ==='answer' && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t// 상대방의 answer\r\n");
      out.write("\t\t\t\t\t\t// 상대방의 sdp를 저장\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tprintln('6. A: (share)local setRemoteDescription')\r\n");
      out.write("\t\t\t\t\t\tsharePc.setRemoteDescription(new RTCSessionDescription(message));\r\n");
      out.write("\t\t\t\t\t} else if(message.type === 'candidate' && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t// offer, anwer 성립 후 상대방의 candidate message\r\n");
      out.write("\t\t\t\t\t\t// 언제 일어나는지 확인.\r\n");
      out.write("\t\t\t\t\t\tvar candidate = new RTCIceCandidate({\r\n");
      out.write("\t\t\t\t\t\t\tsdpMLineIndex : message.label,\r\n");
      out.write("\t\t\t\t\t\t\tcandidate : message.candidate\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\tsharePc.addIceCandidate(candidate);\r\n");
      out.write("\t\t\t\t\t} else if(message === 'bye' && isStarted) {\r\n");
      out.write("\t\t\t\t\t\t// 상대방 떠남.\r\n");
      out.write("\t\t\t\t\t\tconsole.log('Session terminated.');\r\n");
      out.write("\t\t\t\t\t\tisStarted = false;\r\n");
      out.write("\t\t\t\t\t\tsharePc.close();\r\n");
      out.write("\t\t\t\t\t\tsharePc = null;\r\n");
      out.write("\t\t\t\t\t\tisInitiator = false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t///////////////////// socket server로부터의 이벤트 정의 //////////////////\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 연결 붙으면 방 만든다. 만일 사람이 있으면 조인한다.\r\n");
      out.write("\t\t\t\t//socket.emit('create or join', room);\r\n");
      out.write("\t\t\t\t//console.log('Attempted to create or  join room', room);\r\n");
      out.write("\t\t\t\tconsole.log('send teller msg');\r\n");
      out.write("\t\t\t\tsocket.emit('teller', room);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tsocket.on('disconnect', function() {\r\n");
      out.write("\t\t\t\tprintln('웹 소켓 연결이 종료되었습니다.');\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction createPeerConnection() {\r\n");
      out.write("\t\t\ttry {\r\n");
      out.write("\t\t\t\t// 위에서 생성하기로 함.\r\n");
      out.write("\t\t\t\t//pc = new RTCPeerConnection(null);\r\n");
      out.write("\t\t\t\t// handleIceCandidate 메소드 그냥 여기다 바로 정의\r\n");
      out.write("\t\t\t\tpc.onicecandidate = function(event){\r\n");
      out.write("\t\t\t\t\tconsole.log('onicecandidate Event.')\r\n");
      out.write("\t\t\t\t\tconsole.log('icecandidate event: ', event);\r\n");
      out.write("\t\t\t\t\tif(event.candidate) {\r\n");
      out.write("\t\t\t\t\t\tsendMessage({\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'candidate',\r\n");
      out.write("\t\t\t\t\t\t\tlabel : event.candidate.sdpMLineIndex,\r\n");
      out.write("\t\t\t\t\t\t\tid : event.candidate.sdpMid,\r\n");
      out.write("\t\t\t\t\t\t\tcandidate : event.candidate.candidate\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tconsole.log('End of candidates.');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t// addTrack으로 바꾸어야한다.\r\n");
      out.write("\t\t\t\t//pc.onaddstream = handleRemoteStreadAdded;\r\n");
      out.write("\t\t\t\t// ontrack 이벤트 바로 정의 해버림\r\n");
      out.write("\t\t\t\tpc.ontrack = function(event) {\r\n");
      out.write("\t\t\t\t\tconsole.log('onTrack Event.')\r\n");
      out.write("\t\t\t\t\tconsole.log('remote Stream add.')\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tprintln('ontrack event')\r\n");
      out.write("\t\t\t\t\tremoteStream = new MediaStream();\r\n");
      out.write("\t\t\t\t\tremoteStream.addTrack(event.track, remoteStream);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tremoteVideo.srcObject = remoteStream;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$('#chatDiv').height($('#tellerVideoDiv').height());\r\n");
      out.write("\t\t\t\t\t$('#client-info').height($('#clientVideoDiv').height()/2);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t/* 요게 원래거.\r\n");
      out.write("\t\t\t\t\tremoteVideo.srcObject = event.streams[0];\r\n");
      out.write("\t\t\t\t\t*/\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tpc.onnegotiationneeded = function(event) {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tprintln('onnegotiationneeded')\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// remove 이벤트는 아직 정의하지 말자.\r\n");
      out.write("\t\t\t\t//pc.onremovestream = handleRemoteStreamRemoved;\r\n");
      out.write("\t\t\t\tconsole.log('Created RTCPeerConnection');\r\n");
      out.write("\t\t\t} catch(e) {\r\n");
      out.write("\t\t\t\tconsole.log('Failed to create PeerConnection, exception: ' + e.message);\r\n");
      out.write("\t\t\t\talert('Cannot create RTCPeerConnection object');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//shareVideo\r\n");
      out.write("\t\tfunction createSharePeerConnection() {\r\n");
      out.write("\t\t\ttry {\r\n");
      out.write("\t\t\t\t// 위에서 생성하기로 함.\r\n");
      out.write("\t\t\t\t//pc = new RTCPeerConnection(null);\r\n");
      out.write("\t\t\t\t// handleIceCandidate 메소드 그냥 여기다 바로 정의\r\n");
      out.write("\t\t\t\tsharePc.onicecandidate = function(event){\r\n");
      out.write("\t\t\t\t\tconsole.log('(share) onicecandidate Event.')\r\n");
      out.write("\t\t\t\t\tconsole.log('(share) icecandidate event: ', event);\r\n");
      out.write("\t\t\t\t\tif(event.candidate) {\r\n");
      out.write("\t\t\t\t\t\tsendShareMessage({\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'candidate',\r\n");
      out.write("\t\t\t\t\t\t\tlabel : event.candidate.sdpMLineIndex,\r\n");
      out.write("\t\t\t\t\t\t\tid : event.candidate.sdpMid,\r\n");
      out.write("\t\t\t\t\t\t\tcandidate : event.candidate.candidate\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tconsole.log('End of candidates.');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t// addTrack으로 바꾸어야한다.\r\n");
      out.write("\t\t\t\t//pc.onaddstream = handleRemoteStreadAdded;\r\n");
      out.write("\t\t\t\t// ontrack 이벤트 바로 정의 해버림\r\n");
      out.write("\t\t\t\tsharePc.ontrack = function(event) {\r\n");
      out.write("\t\t\t\t\tconsole.log('(share)onTrack Event.')\r\n");
      out.write("\t\t\t\t\tconsole.log('(share)remote Stream add.')\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tprintln('공유 성공!');\r\n");
      out.write("\t\t\t\t\t/*\r\n");
      out.write("\t\t\t\t\tprintln('(share)ontrack event')\r\n");
      out.write("\t\t\t\t\tremoteStream = new MediaStream();\r\n");
      out.write("\t\t\t\t\tremoteStream.addTrack(event.track, remoteStream);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tremoteVideo.srcObject = remoteStream;\r\n");
      out.write("\t\t\t\t\t*/\r\n");
      out.write("\t\t\t\t\t/* 요게 원래거.\r\n");
      out.write("\t\t\t\t\tremoteVideo.srcObject = event.streams[0];\r\n");
      out.write("\t\t\t\t\t*/\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// remove 이벤트는 아직 정의하지 말자.\r\n");
      out.write("\t\t\t\t//pc.onremovestream = handleRemoteStreamRemoved;\r\n");
      out.write("\t\t\t\tconsole.log('(share)Created RTCPeerConnection');\r\n");
      out.write("\t\t\t} catch(e) {\r\n");
      out.write("\t\t\t\tconsole.log('Failed to create PeerConnection, exception: ' + e.message);\r\n");
      out.write("\t\t\t\talert('Cannot create RTCPeerConnection object');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t/////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction maybeStart() {\r\n");
      out.write("\t\t\tconsole.log('>>>>>>>> maybeStart() ', isStarted, localStream, isChannelReady);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(!isStarted && typeof localStream !== 'undefined' && isChannelReady) {\r\n");
      out.write("\t\t\t\tconsole.log('>>>>>> creating peer connection');\r\n");
      out.write("\t\t\t\tcreatePeerConnection();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 이걸로 해보자.\r\n");
      out.write("\t\t\t\tlocalStream.getTracks().forEach(track => {\r\n");
      out.write("\t\t\t\t\tpc.addTrack(track, localStream);\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\tconsole.log(localStream)\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tisStarted = true;\r\n");
      out.write("\t\t\t\tconsole.log('isInitiator', isInitiator);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(isInitiator) {\r\n");
      out.write("\t\t\t\t\tdoCall();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tfunction shareStart() {\r\n");
      out.write("\t\t\tconsole.log('>>>>>>>> shareStart() ');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(isStarted && typeof shareStream !== 'undefined' && isChannelReady) {\r\n");
      out.write("\t\t\t\tconsole.log('>>>>>> (share)creating sharing peer connection');\r\n");
      out.write("\t\t\t\tcreateSharePeerConnection();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 이걸로 해보자.\r\n");
      out.write("\t\t\t\tshareStream.getTracks().forEach(track => {\r\n");
      out.write("\t\t\t\t\tsharePc.addTrack(track, shareStream);\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(isInitiator) {\r\n");
      out.write("\t\t\t\t\tdoShareCall();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t///////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction doCall() {\r\n");
      out.write("\t\t\tconsole.log('doCall()');\r\n");
      out.write("\t\t\tconsole.log('Sending offer to peer');\r\n");
      out.write("\t\t\tprintln('1. A: local createOffer');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tpc.createOffer(setLocalAndSendMessage, handleCreateOfferError);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tfunction doShareCall() {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tprintln('1. A: (share)local createOffer');\r\n");
      out.write("\t\t\tsharePc.createOffer(setShareLocalAndSendMessage, handleShareCreateOfferError);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction doAnswer() {\r\n");
      out.write("\t\t\tconsole.log('doAnswer()');\r\n");
      out.write("\t\t\tconsole.log('Receiving offer to peer')\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tprintln('4. B: local createAnswer')\r\n");
      out.write("\t\t\tpc.createAnswer().then(\r\n");
      out.write("\t\t\t\tsetLocalAndSendMessage,\r\n");
      out.write("\t\t\t\tonCreateSessionDescriptionError\r\n");
      out.write("\t\t\t);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tfunction doShareAnswer() {\r\n");
      out.write("\t\t\tconsole.log('doShareAnswer()');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tprintln('4. B: (share)local createAnswer')\r\n");
      out.write("\t\t\tsharePc.createAnswer().then(\r\n");
      out.write("\t\t\t\tsetShareLocalAndSendMessage,\r\n");
      out.write("\t\t\t\tonCreateSessionDescriptionError\r\n");
      out.write("\t\t\t);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t/////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction setLocalAndSendMessage(sessionDescription) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(isInitiator) {\r\n");
      out.write("\t\t\t\tprintln('2. A: local setLocalDescription')\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tprintln('5. B: local setLocalDescription')\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\tpc.setLocalDescription(sessionDescription);\r\n");
      out.write("\t\t\tconsole.log('setLocalAndSendMessage sending message', sessionDescription);\r\n");
      out.write("\t\t\tsendMessage(sessionDescription);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tfunction setShareLocalAndSendMessage(sessionDescription) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(isInitiator) {\r\n");
      out.write("\t\t\t\tprintln('2. A: (share)local setLocalDescription')\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tprintln('5. B: (share)local setLocalDescription')\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\tsharePc.setLocalDescription(sessionDescription);\r\n");
      out.write("\t\t\tsendShareMessage(sessionDescription);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction handleCreateOfferError(event) {\r\n");
      out.write("\t\t\tconsole.log('createOffer() error', event);\r\n");
      out.write("\t\t\tprintln('local createOffer error')\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tfunction handleShareCreateOfferError(event) {\r\n");
      out.write("\t\t\tconsole.log('createOffer() error', event);\r\n");
      out.write("\t\t\tprintln('(share)local createShareOffer error')\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t/////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction onCreateSessionDescriptionError(error) {\r\n");
      out.write("\t\t\tconsole.log('Failed to Create session description: ' + error.toString());\r\n");
      out.write("\t\t\tprintln('local createAnswer error')\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// shareVideo\r\n");
      out.write("\t\tfunction onCreateSessionDescriptionError(error) {\r\n");
      out.write("\t\t\tconsole.log('Failed to Create session description: ' + error.toString());\r\n");
      out.write("\t\t\tprintln('(share)local createShareAnswer error')\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction sendMessage(msg) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(socket == undefined) {\r\n");
      out.write("\t\t\t\talert('You are not connected status. Connect Server.');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tconsole.log('sendMessage(' + msg + ')');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tsocket.emit('message', msg);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction sendShareMessage(msg) {\r\n");
      out.write("\t\t\tif(socket == undefined) {\r\n");
      out.write("\t\t\t\talert('You are not connected status. Connect Server.');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tconsole.log('sendShareMessage(' + msg + ')');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tsocket.emit('shareVideoMsg', msg);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction sendChat(msg) {\r\n");
      out.write("\t\t\tif(socket == undefined) {\r\n");
      out.write("\t\t\t\talert('You are not connected status. Connect Server.');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tconsole.log('sendChat(' + msg + ')');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tsocket.emit('chat', msg);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t///////////////////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//var screenShareVideo            = document.getElementById('screenShareVideo');\r\n");
      out.write("\t\t//var video            = document.querySelector('video');\r\n");
      out.write("\t\tvar shareBtn         = document.getElementById('screenShareBtn');\r\n");
      out.write("\t\tvar textarea         = document.querySelector('#capabilities');\r\n");
      out.write("\t\tvar settings         = document.querySelector('#settings');\r\n");
      out.write("\t\t// var videoKind        = document.querySelector('#videoKind');\r\n");
      out.write("\r\n");
      out.write("\t\tshareBtn.onclick = function() {\r\n");
      out.write("    \t\r\n");
      out.write("\t\t\tinvokeGetDisplayMedia(function(screen) {\r\n");
      out.write("\t\t\t\taddStreamStopListener(screen, function() {\r\n");
      out.write("\t\t\t\t\t//location.reload();\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(isSharing) {\r\n");
      out.write("\t\t\t\t\tsharePc.close();\r\n");
      out.write("\t\t\t\t\tsharePc = new RTCPeerConnection(pcConfig);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tscreenShareVideo.srcObject = screen;\r\n");
      out.write("        \t\r\n");
      out.write("\t\t\t\tshareStream = screenShareVideo.srcObject;\r\n");
      out.write("\t\t\t\tprintln(shareStream)\r\n");
      out.write("\t\t\t\tsendShareMessage('startShare');\r\n");
      out.write("\t\t\t\tisSharing = true;\r\n");
      out.write("        \t\r\n");
      out.write("\t\t\t\tif(isInitiator) {\r\n");
      out.write("\t\t\t\t\tshareStart();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("        \t\r\n");
      out.write("    \t\t\t}, function(e) {\r\n");
      out.write("    \t\t\t\tshareBtn.disabled = false;\r\n");
      out.write("\r\n");
      out.write("    \t\t\t\tvar error = {\r\n");
      out.write("    \t\t\t\t\t\tname: e.name || 'UnKnown',\r\n");
      out.write("    \t\t\t\t\t\tmessage: e.message || 'UnKnown',\r\n");
      out.write("    \t\t\t\t\t\tstack: e.stack || 'UnKnown'\r\n");
      out.write("    \t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("    \t\t\t\tif(error.name === 'PermissionDeniedError') {\r\n");
      out.write("    \t\t\t\t\tif(location.protocol !== 'https:') {\r\n");
      out.write("    \t\t\t\t\t\terror.message = 'Please use HTTPs.';\r\n");
      out.write("    \t\t\t\t\t\terror.stack   = 'HTTPs is required.';\r\n");
      out.write("    \t\t\t\t\t}\r\n");
      out.write("    \t\t\t\t}\r\n");
      out.write("        \t\r\n");
      out.write("    \t\t\t\tconsole.error(error.name);\r\n");
      out.write("    \t\t\t\tconsole.error(error.message);\r\n");
      out.write("    \t\t\t\tconsole.error(error.stack);\r\n");
      out.write("\r\n");
      out.write("    \t\t\t\talert('Unable to capture your screen.\\n\\n' + error.name + '\\n\\n' + error.message + '\\n\\n' + error.stack);\r\n");
      out.write("    \t\t\t});\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\tif(!navigator.getDisplayMedia && !navigator.mediaDevices.getDisplayMedia) {\r\n");
      out.write("\t\t\t\tvar error = 'Your browser does NOT supports getDisplayMedia API.';\r\n");
      out.write("\t\t\t\tdocument.querySelector('h1').innerHTML = error;\r\n");
      out.write("\t\t\t\tdocument.querySelector('h1').style.color = 'red';\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tscreenShareVideo.style.display=\"none\";\r\n");
      out.write("\t\t\t\t//document.querySelector('video').style.display = 'none';\r\n");
      out.write("\t\t\t\tshareBtn.style.display = 'none';\r\n");
      out.write("\t\t\t\tthrow new Error(error);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction invokeGetDisplayMedia(success, error) {\r\n");
      out.write("\t\t\t\tvar videoConstraints = {};\r\n");
      out.write("    \r\n");
      out.write("\t\t\t\tif(!Object.keys(videoConstraints).length) {\r\n");
      out.write("\t\t\t\t\tvideoConstraints = true;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar displayMediaStreamConstraints = {\r\n");
      out.write("\t\t\t\t\t\tvideo: videoConstraints\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif(navigator.mediaDevices.getDisplayMedia) {\r\n");
      out.write("\t\t\t\t\tnavigator.mediaDevices.getDisplayMedia(displayMediaStreamConstraints).then(success).catch(error);\r\n");
      out.write("\t        \r\n");
      out.write("\t\t\t\t\tprintln('공유 자원 얻어옴.');\r\n");
      out.write("\t        \r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\tnavigator.getDisplayMedia(displayMediaStreamConstraints).then(success).catch(error);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction addStreamStopListener(stream, callback) {\r\n");
      out.write("\t\t\t\tstream.addEventListener('ended', function() {\r\n");
      out.write("\t\t\t\t\tcallback();\r\n");
      out.write("\t\t\t\t\tcallback = function() {};\r\n");
      out.write("\t\t\t\t}, false);\r\n");
      out.write("\t\t\t\tstream.addEventListener('inactive', function() {\r\n");
      out.write("\t\t\t\t\tcallback();\r\n");
      out.write("\t\t\t\t\tcallback = function() {};\r\n");
      out.write("\t\t\t\t}, false);\r\n");
      out.write("\t\t\t\tstream.getTracks().forEach(function(track) {\r\n");
      out.write("\t\t\t\t\ttrack.addEventListener('ended', function() {\r\n");
      out.write("\t\t\t\t\t\tcallback();\r\n");
      out.write("\t\t\t\t\t\tcallback = function() {};\r\n");
      out.write("\t\t\t\t\t}, false);\r\n");
      out.write("\t\t\t\t\ttrack.addEventListener('inactive', function() {\r\n");
      out.write("\t\t\t\t\t\tcallback();\r\n");
      out.write("\t\t\t\t\t\tcallback = function() {};\r\n");
      out.write("\t\t\t\t\t}, false);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tif(isSharing) {\r\n");
      out.write("\t\t\t\t\tsharePc.close();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#sendChat\").bind('click', function(event) {\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tlet msg = $('#message').val();\r\n");
      out.write("\t\t\t\tif(msg != null) {\r\n");
      out.write("\t\t\t\t\tlet str = '';\r\n");
      out.write("\t\t\t\t\tstr += '<strong> 텔러 : ' + msg + '</strong>';\r\n");
      out.write("\t\t\t\t\tstr += '<br>'\r\n");
      out.write("\t\t\t\t\t$('#chat').append(str);\r\n");
      out.write("\t\t\t\t\tsendChat(msg);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$('#message').val('');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#work_selectAccount1001\").bind('click', function(event) {\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/account/'+'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${clientVO.regNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("',\r\n");
      out.write("\t\t\t\t\ttype : 'get',\r\n");
      out.write("\t\t\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t\t\t$('#workDiv').empty();\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tlet content = '';\r\n");
      out.write("\t\t\t\t\t\tcontent += '<div id=\"workName\">사용자 계좌 조회</div>';\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tif(data.length != 0) {\r\n");
      out.write("\t\t\t\t\t\t\tcontent += '<div style=\"width:100%; height:200px; overflow:auto\">';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=     '<table class=\"table table-hover\" style=\"text-align:center\">';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=         '<thead>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=             '<tr>'\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">종류</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">계좌번호</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">상품명</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">잔액</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">출금가능액</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">생성일</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=                 '<th scope=\"col\">최종 거래일</th>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=             '</tr>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=         '</thead>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=         '<tbody>';\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tfor(i = 0; i<data.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tdata[i].accountNo = makeHyphen(data[i].accountNo, 4);\r\n");
      out.write("\t\t\t\t\t\t\t\tdata[i].balance = comma(data[i].balance);\r\n");
      out.write("\t\t\t\t\t\t\t\tdata[i].withdrawableBalance = comma(data[i].withdrawableBalance);\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=         '<tr>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].type + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].accountNo + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].productName + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].balance + '원</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].withdrawableBalance + '원</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].regDate + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=             '<td>' + data[i].recentlyUseDate + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\t\tcontent +=         '</tr>';\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=         '</tbody>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent +=     '</table>';\r\n");
      out.write("\t\t\t\t\t\t\tcontent += '</div>';\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tcontent += '<div>손님의 계좌가 존재하지 않습니다.</div>';\r\n");
      out.write("\t\t\t\t\t\t}\t\r\n");
      out.write("\t\t\t\t\t\t$('#workDiv').append(content);\r\n");
      out.write("\t\t\t\t\t},error : function() {\r\n");
      out.write("\t\t\t\t\t\talert('실패');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t/////////////////////////////////////////////\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\r\n");
      out.write("\twindow.onbeforeunload = function() {\r\n");
      out.write("\t\tsendMessage('bye');\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tfunction makeHyphen(accountNo, code){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet str=\"\";\r\n");
      out.write("\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t\t\tstr += accountNo[i];\r\n");
      out.write("\t\t\tif(i == 2 || i == 8 )\r\n");
      out.write("\t\t\t\tstr += '-';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn str;\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\tswitch(code) {\r\n");
      out.write("\t\t\tcase \"1\" :\r\n");
      out.write("\t\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t\t\t\t\tstr += accountNo[i];\r\n");
      out.write("\t\t\t\t\tif(i == 5 || i == 7 )\r\n");
      out.write("\t\t\t\t\t\tstr += '-';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase \"2\" :\r\n");
      out.write("\t\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t\t\t\t\tstr += accountNo[i];\r\n");
      out.write("\t\t\t\t\tif(i == 2 || i == 5 )\r\n");
      out.write("\t\t\t\t\t\tstr += '-';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase \"3\" :\r\n");
      out.write("\t\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t\t  str += accountNo[i];\r\n");
      out.write("\t    \t\t  if(i == 3 || i == 6 )\r\n");
      out.write("\t    \t\t\t  str += '-';\r\n");
      out.write("\t    \t  }\r\n");
      out.write("\t          break;\r\n");
      out.write("\t      case \"4\" :\r\n");
      out.write("\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t\t  str += accountNo[i];\r\n");
      out.write("\t    \t\t  if(i == 2 || i == 8 )\r\n");
      out.write("\t    \t\t\t  str += '-';\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t            break;\r\n");
      out.write("\t      case \"5\" :\r\n");
      out.write("\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t\t  str += accountNo[i];\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t\t  if(i == 3 || i == 5 )\r\n");
      out.write("\t    \t\t\t  str += '-';\r\n");
      out.write("\t    \t  }\r\n");
      out.write("\t          break;\r\n");
      out.write("\t      case \"6\" :\r\n");
      out.write("\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t\t  str += accountNo[i];\r\n");
      out.write("\t    \t\t  if(i == 2 || i == 8 || i == 10 )\r\n");
      out.write("\t    \t\t\t  str += '-';\r\n");
      out.write("\t    \t  }\r\n");
      out.write("\t          break;\r\n");
      out.write("\t      case \"7\" :\r\n");
      out.write("\t\t\tfor( let i = 0; i < accountNo.length; i++) {\r\n");
      out.write("\t    \t\t  \r\n");
      out.write("\t    \t\t  str += accountNo[i];\r\n");
      out.write("\t    \t\t  if(i == 2 || i == 6 || i == 10 )\r\n");
      out.write("\t    \t\t\t  str += '-';\r\n");
      out.write("\t    \t  }\r\n");
      out.write("\t          break;\r\n");
      out.write("\t\t  }*/\r\n");
      out.write("\t      \r\n");
      out.write("\t  }\r\n");
      out.write("\t\r\n");
      out.write("\tfunction comma(num){\r\n");
      out.write("\t\t  \r\n");
      out.write("\t    var len, point, str; \r\n");
      out.write("\t       \r\n");
      out.write("\t    num = num + \"\"; \r\n");
      out.write("\t    point = num.length % 3 ;\r\n");
      out.write("\t    len = num.length; \r\n");
      out.write("\t   \r\n");
      out.write("\t    str = num.substring(0, point); \r\n");
      out.write("\t    while (point < len) { \r\n");
      out.write("\t        if (str != \"\") str += \",\"; \r\n");
      out.write("\t        str += num.substring(point, point + 3); \r\n");
      out.write("\t        point += 3; \r\n");
      out.write("\t    } \r\n");
      out.write("\t     \r\n");
      out.write("\t    return str;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("\t\t\t\t");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/jsp/include/header_teller.jsp(47,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ not empty tellerVO }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t\t<li class=\"nav-item dropdown\">\r\n");
          out.write("\t\t\t\t\t\t<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style=\"float: right; font-size: large;\">\r\n");
          out.write("\t\t\t\t\t\t\t");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ tellerVO.name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("님 환영합니다.\r\n");
          out.write("\t\t\t\t\t\t</a>\r\n");
          out.write("\t\t\t\t\t\t<div class=\"dropdown-menu dropdown-menu-right animate slideIn\" aria-labelledby=\"navbarDropdown\">\r\n");
          out.write("\t\t\t\t\t\t\t<a class=\"dropdown-item\" href=\"#\">Action</a>\r\n");
          out.write("\t\t\t\t\t\t\t<a class=\"dropdown-item\" href=\"#\">Another action</a>\r\n");
          out.write("\t\t\t\t\t\t\t<div class=\"dropdown-divider\"></div>\r\n");
          out.write("\t\t\t\t\t\t\t<a class=\"dropdown-item\" href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/teller/logout\">로그아웃</a>\r\n");
          out.write("\t\t\t\t\t\t</div>\r\n");
          out.write("\t\t\t\t\t</li>\r\n");
          out.write("\t\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t\t<a href=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/teller/login\" style=\"padding-right: 30px; font-size: x-large;\">로그인</a>\r\n");
          out.write("\t\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }
}
