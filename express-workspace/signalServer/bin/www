#!/usr/bin/env node

/**
 * Module dependencies.
 */

//var app = require('../app');
var debug = require('debug')('web-rtc:server');

//var http = require('http');
var https = require('https');

var os = require('os');
var nodeStatic = require('node-static');
var socketIO = require('socket.io');

var fs = require('fs');

// 서버에서 관리할 자원
var clientArr = new Array();
// 연결 시에 텀이 생기수있어 동기가 필요한데, 그때만 쓰일 자원
var clientConn = new Array();

//대기실에 접속중인 텔러.
var waitTellers = new Array();
// 대기실에서 창구로 들어가는 텔러
var tellerArr = new Array();

// 창구의 텔러
var bankTellerArr = new Array();

// 창구의 손님
var bankClientArr = new Array();

var rooms = new Array();

const option = {
		ca : fs.readFileSync('D:/hanaProject-workspace/bin/openssl/openssl-1.0.2j-fips-x86_64/OpenSSL/bin/rootca.pem'),
		key : fs.readFileSync('D:/hanaProject-workspace/bin/openssl/openssl-1.0.2j-fips-x86_64/OpenSSL/bin/localhost_private.pem'),
		cert : fs.readFileSync('D:/hanaProject-workspace/bin/openssl/openssl-1.0.2j-fips-x86_64/OpenSSL/bin/localhost.pem')
}

var fileServer = new(nodeStatic.Server)();

// jinwoo
//var app = http.createServer(function(req, res) {
//	console.log("Express 시작");
//	fileServer.serve(req, res);
//}).listen(1337);

var app = https.createServer(option, function(req, res) {
	console.log("Express 시작");
	fileServer.serve(req, res);
}).listen(1337);

var io = socketIO.listen(app);
io.sockets.on('connection', function(socket) {

  console.log('새로운 접속 : ' + socket);
  
  socket.emit('check');
  
  // convenience function to log server messages on the client
  function log() {
    var array = ['Message from server:'];
    array.push.apply(array, arguments);
    socket.emit('log', array);
  }
  
  socket.on('waitRoom', function(type) {
	  
	  var str = type.slice(0, 6);
	  console.log('waitRoom come: ' + str);
	  
	  if(str == 'client') {
		  
		  var clientID = type.split(':')[1];
		  var jobType = type.split(':')[2];
		  console.log('clientID : ' + clientID);
		  console.log('jobType : ' + jobType);
		  
		  socket.emit('waitingClients', clientArr.length);
		  
		  clientArr.push({client : socket, ID : clientID, socketID : socket.id});
		  clientConn.push({clientID : clientID, jobType : jobType });
		  
		  if(tellerArr.length > 0) {
			  var tellerInfo = tellerArr.shift();
			  var teller = tellerInfo.teller;
			  
			  teller.emit('ready', clientID + ':' + jobType);
		  } else {
			  
			  waitTellers.forEach(function(e) {
				  e.emit('waitingClients', clientArr.length);
			  })
		  }
		  
		  console.log('client event | teller length : ' + tellerArr.length)
	  }
	  
	  if(type == 'waitTeller') {
		  waitTellers.push(socket);
		  socket.emit('waitingClients', clientArr.length);
	  }
	  
	  if(type == 'teller') {
		  
		  console.log('teller');
		  
		  //tellers.push(socket);
		  //tellerSocketID.push(socket.id);
		  
		  tellerArr.push({teller : socket, socketID : socket.id});

		  if(clientArr.length > 0) {
			  
			  console.log('client exists');
			  
			  tellerArr.shift();
			  waitTellers.shift();
			  
			  let clientID = clientConn[0].clientID;
			  let jobtype = clientConn[0].jobType;
			  clientConn.shift();
			  socket.emit('ready', clientID + ':' + jobtype);
			  
		      console.log('Teller ID ' + socket.id + ' created room ' + clientID);
			  
			  ////////////////////
		  } else {
			  console.log('teller event | waitTellers length : ' + waitTellers.length)
			  console.log('teller event | clientArr length : ' + clientArr.length)
			  
		  }
	  }
	  
  })
  
  socket.on('message', function(message) {
	  
	  let room = Object.keys(io.sockets.adapter.sids[socket.id])[1];
	  socket.broadcast.to(room).emit('message', message)
  })
  
  socket.on('shareVideoMsg', function(message) {
	  
	  console.log('message 이벤트를 받았습니다.');
	  console.dir(message);
	  
	  console.dir('나를 포함한 모든 클라이언트에게 메시지 이벤트 전송.');
	  
	  let room = Object.keys(io.sockets.adapter.sids[socket.id])[1];
	  socket.broadcast.to(room).emit('shareVideoMsg', message)
	  
  })

  socket.on('bankTeller', function(room) {
	  
	  console.log('teller enter bankCounter.')
	  
	  bankTellerArr.push({socket : socket, socketID : socket.id});
	  
	  socket.join(room);
	  console.log('Client ID ' + socket.id + ' created room ' + room);
	  socket.emit('created', room, socket.id);
	  
	  let index;
	  let client;
	  for(let i = 0; i < clientArr.length; i++) {
		  if(clientArr[i].ID == room){
			  index = i;
			  client = clientArr[i].client;
		  }
	  }
	  
	  clientArr.splice(index, 1);
	  
	  client.emit('ready');
	  
	  for(let i = 0; i < clientArr.length; i++) {
		  clientArr[i].client.emit('waitingClients', i);
	  }
	  
  });
  
  socket.on('bankClient', function(room) {
	  
	  console.log('client enter bankCounter.')
	  
	  let clientsInRoom = io.sockets.adapter.rooms[room];
	  let numClients = clientsInRoom ? Object.keys(clientsInRoom.sockets).length : 0;
	  
	  bankClientArr.push({socket : socket, socketID : socket.id});
	  
	  while(numClients == 0) {
		  clientsInRoom = io.sockets.adapter.rooms[room];
		  numClients = clientsInRoom ? Object.keys(clientsInRoom.sockets).length : 0;
	  }
	  
	  
	  io.sockets.in(room).emit('join', room);
	  socket.join(room);
	  socket.emit('joined', room, socket.id);
	  io.sockets.in(room).emit('roomReady');
	  //console.log(clientsInRoom.sockets[0])
	  //console.log(clientsInRoom.sockets[1])
	  console.log(socket)
	  //rooms.push({ tellerSock : io.sockets.in(room)[0], clientSock : io.sockets.in(room)[1]})
	  //console.log(io.sockets.in(room)[0])
	  //console.log(io.sockets.in(room)[1])
	  
  });

  socket.on('ipaddr', function() {
    var ifaces = os.networkInterfaces();
    for (var dev in ifaces) {
      ifaces[dev].forEach(function(details) {
        if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
          socket.emit('ipaddr', details.address);
        }
      });
    }
  });
  
  socket.on('chat', function(msg) {
	  
	  let room = Object.keys(io.sockets.adapter.sids[socket.id])[1];
	  socket.broadcast.to(room).emit('chat', msg)
  });
  
  socket.on('work', function(msg) {
	  
	  let room = Object.keys(io.sockets.adapter.sids[socket.id])[1];
	  socket.broadcast.to(room).emit('work', msg)
  });
  
  socket.on('waitRoomClientDisconnect', function() {

	  let clientSocektID = [];
	  let index = -1;
	  for(let i = 0; i < clientArr.length; i++) {
		  
		  if(clientArr[i].socketID == socket.id)
			  index = i;
		  
	  }
	  
	  clientArr.splice(index, 1);
	  clientConn.splice(index, 1);
	  
	  for(let i = 0; i < clientArr.length; i++) {
		  clientArr[i].client.emit('waitingClients', i);
	  }
	  
	  waitTellers.forEach(function(e) {
		  e.emit('waitingClients', clientArr.length);
	  })
	  
	  /*
	  if(index != -1)  {
		  
		  clientArr.splice(index, 1);
		  clientConn.splice(index, 1);
		  
		  for(let i = 0; i < clientArr.length; i++) {
			  clientArr[i].client.emit('waitingClients', i);
		  }
		  
		  waitTellers.forEach(function(e) {
			  e.emit('waitingClients', clientArr.length);
		  })
		  
	  } else {
		  for(let i = 0; i < tellerArr.length; i++) {
			  if(tellerArr[i].socketID == socket.id)
				  index = i;
		  }
		  
		  tellerArr.splice(index, 1);
		  waitTellers.splice(index, 1);
	  }
	  */
	  socket.disconnect();
  });
  
  socket.on('waitRoomTellerDisconnect', function() {
	  
	  for(let i = 0; i < tellerArr.length; i++) {
		  if(tellerArr[i].socketID == socket.id){
			  index = i;
		  }
	  }
	  tellerArr.splice(index, 1);
	  waitTellers.splice(index, 1);
	  
	  socket.disconnect();
  });
  
  socket.on('bankClientDisconnect', function() {
	  
	  let room = Object.keys(io.sockets.adapter.sids[socket.id])[1];
	  socket.broadcast.to(room).emit('clientDisconnect');
	  socket.disconnect();
  });
  
  socket.on('bankTellerDisconnect', function() {
	  
	  let room = Object.keys(io.sockets.adapter.sids[socket.id])[1];
	  socket.broadcast.to(room).emit('tellerDisconnect');
	  socket.disconnect();
  });
  
  socket.on('disconnect', function() {
	  console.log("SOCKETIO disconnect EVENT: ", socket.id, " client disconnect");
	  
	  //let bool = false;
	  
	  let clientSocektID = [];
	  let index = -1;
	  for(let i = 0; i < clientArr.length; i++) {
		  
		  if(clientArr[i].socketID == socket.id)
			  index = i;
		  
	  }
	  
	  if(index != -1)  {
		  clientArr.splice(index, 1);
		  clientConn.splice(inde, 1);
		  
		  for(let i = 0; i < clientArr.length; i++) {
			  clientArr[i].client.emit('waitingClients', i);
		  }
		  
		  waitTellers.forEach(function(e) {
			  e.emit('waitingClients', clientArr.length);
		  })
	  } else {
		  
		  for(let i = 0; i < tellerArr.length; i++) {
			  if(tellerArr[i].socketID == socket.id) {
				  index = i;
				  //bool = true;
			  }
				  
		  }
		  if(index != -1){
			  tellerArr.splice(index, 1); 
		  } 
		  /*
		  else {

			  for(let i = 0; i < rooms; i++) {
				  index = i;
				  if(rooms[i].tellerSock == socket) {
					  rooms[i].clientSock.emit('tellerForcedOut');
					  console.log('get')
				  } else if(rooms[i].clientSock == socket) {
					  rooms[i].clientSock.emit('clientForcedOut');
					  console.log('put')
				  }
			  }
			  if (index != -1) {
				  rooms[i].splice(index, 1);
			  } 
			  
		  }
		  */
	}

	  
  });

  socket.on('bye', function(){
    console.log('received bye');
  });

});

/**
 * Get port from environment and store in Express.
 */
/*
//var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
*/
/**
 * Create HTTP server.
 */
/*
var server = http.createServer(app);
*/
/**
 * Listen on provided port, on all network interfaces.
 */
/*
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
*/
/**
 * Normalize a port into a number, string, or false.
 */
/*
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
*/
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
/*
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
*/